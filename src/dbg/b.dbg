mc: 16:55 3.27.2020. Compiling test/b.mc in debug mode.

The input program is:

int f(int a)
{
  int b;
  if (>(a, 4)) then
    {
      b = +(2, *(a, 8));
    }
  else
    {
      b = 343;
    }
  return
    b
}
int main()
{
  print f(5);
  print f(6);
  print f(7);
  print f(8);
  return
    0
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
f : int -> int
main :  -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int f(int a)
{
  int b;
  if (  let 
      x7 : int = a
      x8 : int = 4
      x9 : int = >(x7, x8)
  in
    x9
  ) then
    {
      b =       let 
          x1 : int = 2
          x2 : int =
            let 
                x4 : int = a
                x5 : int = 8
                x6 : int = *(x4, x5)
            in
              x6
          x3 : int = +(x1, x2)
      in
        x3
      ;
    }
  else
    {
      b = 343;
    }
  return
    b
}
int main()
{
  print let x10 : int = 5 in let x11 : int = f(x10) in x11;
  print let x12 : int = 6 in let x13 : int = f(x12) in x13;
  print let x14 : int = 7 in let x15 : int = f(x14) in x15;
  print let x16 : int = 8 in let x17 : int = f(x16) in x17;
  return
    0
}

After the lifting phase:

int f(int a)
{
  int b;
  if (  let 
      x7 : int = a
      x8 : int = 4
      x9 : int = >(x7, x8)
  in
    x9
  ) then
    {
      b =       let 
          x1 : int = 2
          x4 : int = a
          x5 : int = 8
          x6 : int = *(x4, x5)
          x2 : int = x6
          x3 : int = +(x1, x2)
      in
        x3
      ;
    }
  else
    {
      b = 343;
    }
  return
    b
}
int main()
{
  print let x10 : int = 5 in let x11 : int = f(x10) in x11;
  print let x12 : int = 6 in let x13 : int = f(x12) in x13;
  print let x14 : int = 7 in let x15 : int = f(x14) in x15;
  print let x16 : int = 8 in let x17 : int = f(x16) in x17;
  return
    0
}

After the copyprop phase:

int f(int a)
{
  int b;
  if (  let 
      x8 : int = 4
      x9 : int = >(a, x8)
  in
    x9
  ) then
    {
      b =       let 
          x1 : int = 2
          x5 : int = 8
          x6 : int = *(a, x5)
          x3 : int = +(x1, x6)
      in
        x3
      ;
    }
  else
    {
      b = 343;
    }
  return
    b
}
int main()
{
  print let x10 : int = 5 in let x11 : int = f(x10) in x11;
  print let x12 : int = 6 in let x13 : int = f(x12) in x13;
  print let x14 : int = 7 in let x15 : int = f(x14) in x15;
  print let x16 : int = 8 in let x17 : int = f(x16) in x17;
  return
    0
}

After the control phase:

f:	(a)
	b = 0
	x8 = 4
	x9 = a > x8
	jmpzero x9, l18
	x1 = 2
	x5 = 8
	x6 = a * x5
	x3 = x1 + x6
	b = x3
	jmp l19
l18:	nop
	b = 343
l19:	nop
	x20 = b
	return x20

main:	()
	x10 = 5
	x11 = call f(x10)
	x21 = x11
	print x21
	x12 = 6
	x13 = call f(x12)
	x22 = x13
	print x22
	x14 = 7
	x15 = call f(x14)
	x23 = x15
	print x23
	x16 = 8
	x17 = call f(x16)
	x24 = x17
	print x24
	x25 = 0
	return x25

CG environment for f is:
a : 2
b : -9
x1 : -4
x20 : -10
x3 : -7
x5 : -5
x6 : -6
x8 : -2
x9 : -3

CG environment for main is:
x10 : -1
x11 : -2
x12 : -4
x13 : -5
x14 : -7
x15 : -8
x16 : -10
x17 : -11
x21 : -3
x22 : -6
x23 : -9
x24 : -12
x25 : -13

Emitting MIPS assembley code to test/b.asm


