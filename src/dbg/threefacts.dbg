mc: 16:53 3.27.2020. Compiling test/threefacts.mc in debug mode.

The input program is:

int ifact(int m)
{
  int answer;
  answer = 1;
  while (>(m, 0))
    {
      answer = *(answer, m);
      m = -(m, 1);
    }
  return
    answer
}
int rfact(int n)
{
  if (==(n, 0)) then
    return
      1
  else
    return
      *(n, rfact(-(n, 1)))
}
int condfact(int n)
{
  return
    if ==(n, 0) then
      1
    else
      *(n, condfact(-(n, 1)))
}
int main()
{
  print ifact(6);
  print rfact(6);
  print condfact(6);
  return
    0
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
condfact : int -> int
ifact : int -> int
main :  -> int
not : bool -> bool
rfact : int -> int

The program is well-typed.


After the naming phase:

int ifact(int m)
{
  int answer;
  answer = 1;
  while (let x7 : int = m in let x8 : int = 0 in let x9 : int = >(x7, x8) in x9)
    {
      answer =       let 
          x1 : int = answer
          x2 : int = m
          x3 : int = *(x1, x2)
      in
        x3
      ;
      m =       let 
          x4 : int = m
          x5 : int = 1
          x6 : int = -(x4, x5)
      in
        x6
      ;
    }
  return
    answer
}
int rfact(int n)
{
  if (  let 
      x18 : int = n
      x19 : int = 0
      x20 : int = ==(x18, x19)
  in
    x20
  ) then
    return
      1
  else
    return
      let 
          x10 : int = n
          x11 : int =
            let 
                x13 : int =
                  let 
                      x15 : int = n
                      x16 : int = 1
                      x17 : int = -(x15, x16)
                  in
                    x17
                x14 : int = rfact(x13)
            in
              x14
          x12 : int = *(x10, x11)
      in
        x12
}
int condfact(int n)
{
  return
    let 
        x21 : bool =
          let 
              x30 : int = n
              x31 : int = 0
              x32 : int = ==(x30, x31)
          in
            x32
    in
      if x21 then
        1
      else
        let 
            x22 : int = n
            x23 : int =
              let 
                  x25 : int =
                    let 
                        x27 : int = n
                        x28 : int = 1
                        x29 : int = -(x27, x28)
                    in
                      x29
                  x26 : int = condfact(x25)
              in
                x26
            x24 : int = *(x22, x23)
        in
          x24
}
int main()
{
  print let x33 : int = 6 in let x34 : int = ifact(x33) in x34;
  print let x35 : int = 6 in let x36 : int = rfact(x35) in x36;
  print let x37 : int = 6 in let x38 : int = condfact(x37) in x38;
  return
    0
}

After the lifting phase:

int ifact(int m)
{
  int answer;
  answer = 1;
  while (let x7 : int = m in let x8 : int = 0 in let x9 : int = >(x7, x8) in x9)
    {
      answer =       let 
          x1 : int = answer
          x2 : int = m
          x3 : int = *(x1, x2)
      in
        x3
      ;
      m =       let 
          x4 : int = m
          x5 : int = 1
          x6 : int = -(x4, x5)
      in
        x6
      ;
    }
  return
    answer
}
int rfact(int n)
{
  if (  let 
      x18 : int = n
      x19 : int = 0
      x20 : int = ==(x18, x19)
  in
    x20
  ) then
    return
      1
  else
    return
      let 
          x10 : int = n
          x15 : int = n
          x16 : int = 1
          x17 : int = -(x15, x16)
          x13 : int = x17
          x14 : int = rfact(x13)
          x11 : int = x14
          x12 : int = *(x10, x11)
      in
        x12
}
int condfact(int n)
{
  return
    let 
        x30 : int = n
        x31 : int = 0
        x32 : int = ==(x30, x31)
        x21 : bool = x32
    in
      if x21 then
        1
      else
        let 
            x22 : int = n
            x27 : int = n
            x28 : int = 1
            x29 : int = -(x27, x28)
            x25 : int = x29
            x26 : int = condfact(x25)
            x23 : int = x26
            x24 : int = *(x22, x23)
        in
          x24
}
int main()
{
  print let x33 : int = 6 in let x34 : int = ifact(x33) in x34;
  print let x35 : int = 6 in let x36 : int = rfact(x35) in x36;
  print let x37 : int = 6 in let x38 : int = condfact(x37) in x38;
  return
    0
}

After the copyprop phase:

int ifact(int m)
{
  int answer;
  answer = 1;
  while (let x8 : int = 0 in let x9 : int = >(m, x8) in x9)
    {
      answer =       let 
          x3 : int = *(answer, m)
      in
        x3
      ;
      m =       let 
          x5 : int = 1
          x6 : int = -(m, x5)
      in
        x6
      ;
    }
  return
    answer
}
int rfact(int n)
{
  if (  let 
      x19 : int = 0
      x20 : int = ==(n, x19)
  in
    x20
  ) then
    return
      1
  else
    return
      let 
          x16 : int = 1
          x17 : int = -(n, x16)
          x14 : int = rfact(x17)
          x12 : int = *(n, x14)
      in
        x12
}
int condfact(int n)
{
  return
    let 
        x31 : int = 0
        x32 : int = ==(n, x31)
    in
      if x32 then
        1
      else
        let 
            x28 : int = 1
            x29 : int = -(n, x28)
            x26 : int = condfact(x29)
            x24 : int = *(n, x26)
        in
          x24
}
int main()
{
  print let x33 : int = 6 in let x34 : int = ifact(x33) in x34;
  print let x35 : int = 6 in let x36 : int = rfact(x35) in x36;
  print let x37 : int = 6 in let x38 : int = condfact(x37) in x38;
  return
    0
}

After the control phase:

ifact:	(m)
	answer = 0
	answer = 1
l39:	nop
	x8 = 0
	x9 = m > x8
	jmpzero x9, l40
	x3 = answer * m
	answer = x3
	x5 = 1
	x6 = m - x5
	m = x6
	jmp l39
l40:	nop
	x41 = answer
	return x41

rfact:	(n)
	x19 = 0
	x20 = n == x19
	jmpzero x20, l42
	x45 = 1
	return x45
	jmp l43
l42:	nop
	x16 = 1
	x17 = n - x16
	x14 = call rfact(x17)
	x12 = n * x14
	x44 = x12
	return x44
l43:	nop

condfact:	(n)
	x31 = 0
	x32 = n == x31
	jmpzero x32, l47
	x46 = 1
	jmp l48
l47:	nop
	x28 = 1
	x29 = n - x28
	x26 = call condfact(x29)
	x24 = n * x26
	x46 = x24
l48:	nop
	x49 = x46
	return x49

main:	()
	x33 = 6
	x34 = call ifact(x33)
	x50 = x34
	print x50
	x35 = 6
	x36 = call rfact(x35)
	x51 = x36
	print x51
	x37 = 6
	x38 = call condfact(x37)
	x52 = x38
	print x52
	x53 = 0
	return x53

CG environment for ifact is:
answer : -6
m : 2
x3 : -5
x41 : -9
x5 : -7
x6 : -8
x8 : -3
x9 : -4

CG environment for rfact is:
n : 2
x12 : -7
x14 : -6
x16 : -4
x17 : -5
x19 : -1
x20 : -2
x44 : -8
x45 : -3

CG environment for condfact is:
n : 2
x24 : -7
x26 : -6
x28 : -4
x29 : -5
x31 : -1
x32 : -2
x46 : -8
x49 : -9

CG environment for main is:
x33 : -1
x34 : -2
x35 : -4
x36 : -5
x37 : -7
x38 : -8
x50 : -3
x51 : -6
x52 : -9
x53 : -10

Emitting MIPS assembley code to test/threefacts.asm


