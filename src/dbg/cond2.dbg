mc: 16:56 3.27.2020. Compiling test/cond2.mc in debug mode.

The input program is:

int main()
{
  if (>(2, 3)) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (>(3, 3)) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (>(4, 3)) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (>=(2, 3)) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (>=(3, 3)) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (>=(4, 3)) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (<(2, 3)) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (<(3, 3)) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (<(4, 3)) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  if (<=(2, 3)) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (<=(3, 3)) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (<=(4, 3)) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  return
    0
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
main :  -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int main()
{
  if (  let 
      x1 : int = 2
      x2 : int = 3
      x3 : int = >(x1, x2)
  in
    x3
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x4 : int = 3
      x5 : int = 3
      x6 : int = >(x4, x5)
  in
    x6
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x7 : int = 4
      x8 : int = 3
      x9 : int = >(x7, x8)
  in
    x9
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x10 : int = 2
      x11 : int = 3
      x12 : int = >=(x10, x11)
  in
    x12
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x13 : int = 3
      x14 : int = 3
      x15 : int = >=(x13, x14)
  in
    x15
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x16 : int = 4
      x17 : int = 3
      x18 : int = >=(x16, x17)
  in
    x18
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x19 : int = 2
      x20 : int = 3
      x21 : int = <(x19, x20)
  in
    x21
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x22 : int = 3
      x23 : int = 3
      x24 : int = <(x22, x23)
  in
    x24
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x25 : int = 4
      x26 : int = 3
      x27 : int = <(x25, x26)
  in
    x27
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  if (  let 
      x28 : int = 2
      x29 : int = 3
      x30 : int = <=(x28, x29)
  in
    x30
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x31 : int = 3
      x32 : int = 3
      x33 : int = <=(x31, x32)
  in
    x33
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x34 : int = 4
      x35 : int = 3
      x36 : int = <=(x34, x35)
  in
    x36
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  return
    0
}

After the lifting phase:

int main()
{
  if (  let 
      x1 : int = 2
      x2 : int = 3
      x3 : int = >(x1, x2)
  in
    x3
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x4 : int = 3
      x5 : int = 3
      x6 : int = >(x4, x5)
  in
    x6
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x7 : int = 4
      x8 : int = 3
      x9 : int = >(x7, x8)
  in
    x9
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x10 : int = 2
      x11 : int = 3
      x12 : int = >=(x10, x11)
  in
    x12
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x13 : int = 3
      x14 : int = 3
      x15 : int = >=(x13, x14)
  in
    x15
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x16 : int = 4
      x17 : int = 3
      x18 : int = >=(x16, x17)
  in
    x18
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x19 : int = 2
      x20 : int = 3
      x21 : int = <(x19, x20)
  in
    x21
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x22 : int = 3
      x23 : int = 3
      x24 : int = <(x22, x23)
  in
    x24
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x25 : int = 4
      x26 : int = 3
      x27 : int = <(x25, x26)
  in
    x27
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  if (  let 
      x28 : int = 2
      x29 : int = 3
      x30 : int = <=(x28, x29)
  in
    x30
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x31 : int = 3
      x32 : int = 3
      x33 : int = <=(x31, x32)
  in
    x33
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x34 : int = 4
      x35 : int = 3
      x36 : int = <=(x34, x35)
  in
    x36
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  return
    0
}

After the copyprop phase:

int main()
{
  if (  let 
      x1 : int = 2
      x2 : int = 3
      x3 : int = >(x1, x2)
  in
    x3
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x4 : int = 3
      x5 : int = 3
      x6 : int = >(x4, x5)
  in
    x6
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x7 : int = 4
      x8 : int = 3
      x9 : int = >(x7, x8)
  in
    x9
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x10 : int = 2
      x11 : int = 3
      x12 : int = >=(x10, x11)
  in
    x12
  ) then
    {
      print 10;
    }
  else
    {
      print 230;
    }
  if (  let 
      x13 : int = 3
      x14 : int = 3
      x15 : int = >=(x13, x14)
  in
    x15
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x16 : int = 4
      x17 : int = 3
      x18 : int = >=(x16, x17)
  in
    x18
  ) then
    {
      print 430;
    }
  else
    {
      print 10;
    }
  if (  let 
      x19 : int = 2
      x20 : int = 3
      x21 : int = <(x19, x20)
  in
    x21
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x22 : int = 3
      x23 : int = 3
      x24 : int = <(x22, x23)
  in
    x24
  ) then
    {
      print 10;
    }
  else
    {
      print 330;
    }
  if (  let 
      x25 : int = 4
      x26 : int = 3
      x27 : int = <(x25, x26)
  in
    x27
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  if (  let 
      x28 : int = 2
      x29 : int = 3
      x30 : int = <=(x28, x29)
  in
    x30
  ) then
    {
      print 230;
    }
  else
    {
      print 10;
    }
  if (  let 
      x31 : int = 3
      x32 : int = 3
      x33 : int = <=(x31, x32)
  in
    x33
  ) then
    {
      print 330;
    }
  else
    {
      print 10;
    }
  if (  let 
      x34 : int = 4
      x35 : int = 3
      x36 : int = <=(x34, x35)
  in
    x36
  ) then
    {
      print 10;
    }
  else
    {
      print 430;
    }
  return
    0
}

After the control phase:

main:	()
	x1 = 2
	x2 = 3
	x3 = x1 > x2
	jmpzero x3, l37
	x40 = 10
	print x40
	jmp l38
l37:	nop
	x39 = 230
	print x39
l38:	nop
	x4 = 3
	x5 = 3
	x6 = x4 > x5
	jmpzero x6, l41
	x44 = 10
	print x44
	jmp l42
l41:	nop
	x43 = 330
	print x43
l42:	nop
	x7 = 4
	x8 = 3
	x9 = x7 > x8
	jmpzero x9, l45
	x48 = 430
	print x48
	jmp l46
l45:	nop
	x47 = 10
	print x47
l46:	nop
	x10 = 2
	x11 = 3
	x12 = x10 >= x11
	jmpzero x12, l49
	x52 = 10
	print x52
	jmp l50
l49:	nop
	x51 = 230
	print x51
l50:	nop
	x13 = 3
	x14 = 3
	x15 = x13 >= x14
	jmpzero x15, l53
	x56 = 330
	print x56
	jmp l54
l53:	nop
	x55 = 10
	print x55
l54:	nop
	x16 = 4
	x17 = 3
	x18 = x16 >= x17
	jmpzero x18, l57
	x60 = 430
	print x60
	jmp l58
l57:	nop
	x59 = 10
	print x59
l58:	nop
	x19 = 2
	x20 = 3
	x21 = x19 < x20
	jmpzero x21, l61
	x64 = 230
	print x64
	jmp l62
l61:	nop
	x63 = 10
	print x63
l62:	nop
	x22 = 3
	x23 = 3
	x24 = x22 < x23
	jmpzero x24, l65
	x68 = 10
	print x68
	jmp l66
l65:	nop
	x67 = 330
	print x67
l66:	nop
	x25 = 4
	x26 = 3
	x27 = x25 < x26
	jmpzero x27, l69
	x72 = 10
	print x72
	jmp l70
l69:	nop
	x71 = 430
	print x71
l70:	nop
	x28 = 2
	x29 = 3
	x30 = x28 <= x29
	jmpzero x30, l73
	x76 = 230
	print x76
	jmp l74
l73:	nop
	x75 = 10
	print x75
l74:	nop
	x31 = 3
	x32 = 3
	x33 = x31 <= x32
	jmpzero x33, l77
	x80 = 330
	print x80
	jmp l78
l77:	nop
	x79 = 10
	print x79
l78:	nop
	x34 = 4
	x35 = 3
	x36 = x34 <= x35
	jmpzero x36, l81
	x84 = 10
	print x84
	jmp l82
l81:	nop
	x83 = 430
	print x83
l82:	nop
	x85 = 0
	return x85

CG environment for main is:
x1 : -1
x10 : -16
x11 : -17
x12 : -18
x13 : -21
x14 : -22
x15 : -23
x16 : -26
x17 : -27
x18 : -28
x19 : -31
x2 : -2
x20 : -32
x21 : -33
x22 : -36
x23 : -37
x24 : -38
x25 : -41
x26 : -42
x27 : -43
x28 : -46
x29 : -47
x3 : -3
x30 : -48
x31 : -51
x32 : -52
x33 : -53
x34 : -56
x35 : -57
x36 : -58
x39 : -5
x4 : -6
x40 : -4
x43 : -10
x44 : -9
x47 : -15
x48 : -14
x5 : -7
x51 : -20
x52 : -19
x55 : -25
x56 : -24
x59 : -30
x6 : -8
x60 : -29
x63 : -35
x64 : -34
x67 : -40
x68 : -39
x7 : -11
x71 : -45
x72 : -44
x75 : -50
x76 : -49
x79 : -55
x8 : -12
x80 : -54
x83 : -60
x84 : -59
x85 : -61
x9 : -13

Emitting MIPS assembley code to test/cond2.asm


