mc: 16:57 3.27.2020. Compiling test/gcd.mc in debug mode.

The input program is:

int mod(int a, int b)
{
  if (<(b, 0)) then
    return
      0
  else
    while (>=(a, b))
      a = -(a, b);
  return
    a
}
int abs(int a)
{
  if (<(a, 0)) then
    return
      -(0, a)
  else
    return
      a
}
int gcd(int a, int b)
{
  a = abs(a);
  b = abs(b);
  if (  (==(a, 0) or ==(b, 0))
  ) then
    return
      +(a, b)
  else
    if (>(b, a)) then
      return
        gcd(a, mod(b, a))
    else
      return
        gcd(mod(a, b), b)
}
void main()
{
  int x;
  x = gcd(14039, 1529);
  print x;
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
abs : int -> int
gcd : int * int -> int
main :  -> void
mod : int * int -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int mod(int a, int b)
{
  if (  let 
      x7 : int = b
      x8 : int = 0
      x9 : int = <(x7, x8)
  in
    x9
  ) then
    return
      0
  else
    while (let x4 : int = a in let x5 : int = b in let x6 : int = >=(x4, x5) in x6)
      a =       let 
          x1 : int = a
          x2 : int = b
          x3 : int = -(x1, x2)
      in
        x3
      ;
  return
    a
}
int abs(int a)
{
  if (  let 
      x13 : int = a
      x14 : int = 0
      x15 : int = <(x13, x14)
  in
    x15
  ) then
    return
      let 
          x10 : int = 0
          x11 : int = a
          x12 : int = -(x10, x11)
      in
        x12
  else
    return
      a
}
int gcd(int a, int b)
{
  a =   let 
      x16 : int = a
      x17 : int = abs(x16)
  in
    x17
  ;
  b =   let 
      x18 : int = b
      x19 : int = abs(x18)
  in
    x19
  ;
  if (  let 
      x38 : bool =
        let 
            x42 : int = a
            x43 : int = 0
            x44 : int = ==(x42, x43)
        in
          x44
  in
    if x38 then
      x38
    else
      let 
          x39 : int = b
          x40 : int = 0
          x41 : int = ==(x39, x40)
      in
        x41
  ) then
    return
      let 
          x35 : int = a
          x36 : int = b
          x37 : int = +(x35, x36)
      in
        x37
  else
    if (    let 
        x32 : int = b
        x33 : int = a
        x34 : int = >(x32, x33)
    in
      x34
    ) then
      return
        let 
            x26 : int = a
            x27 : int =
              let 
                  x29 : int = b
                  x30 : int = a
                  x31 : int = mod(x29, x30)
              in
                x31
            x28 : int = gcd(x26, x27)
        in
          x28
    else
      return
        let 
            x20 : int =
              let 
                  x23 : int = a
                  x24 : int = b
                  x25 : int = mod(x23, x24)
              in
                x25
            x21 : int = b
            x22 : int = gcd(x20, x21)
        in
          x22
}
void main()
{
  int x;
  x =   let 
      x45 : int = 14039
      x46 : int = 1529
      x47 : int = gcd(x45, x46)
  in
    x47
  ;
  print x;
}

After the lifting phase:

int mod(int a, int b)
{
  if (  let 
      x7 : int = b
      x8 : int = 0
      x9 : int = <(x7, x8)
  in
    x9
  ) then
    return
      0
  else
    while (let x4 : int = a in let x5 : int = b in let x6 : int = >=(x4, x5) in x6)
      a =       let 
          x1 : int = a
          x2 : int = b
          x3 : int = -(x1, x2)
      in
        x3
      ;
  return
    a
}
int abs(int a)
{
  if (  let 
      x13 : int = a
      x14 : int = 0
      x15 : int = <(x13, x14)
  in
    x15
  ) then
    return
      let 
          x10 : int = 0
          x11 : int = a
          x12 : int = -(x10, x11)
      in
        x12
  else
    return
      a
}
int gcd(int a, int b)
{
  a =   let 
      x16 : int = a
      x17 : int = abs(x16)
  in
    x17
  ;
  b =   let 
      x18 : int = b
      x19 : int = abs(x18)
  in
    x19
  ;
  if (  let 
      x42 : int = a
      x43 : int = 0
      x44 : int = ==(x42, x43)
      x38 : bool = x44
  in
    if x38 then
      x38
    else
      let 
          x39 : int = b
          x40 : int = 0
          x41 : int = ==(x39, x40)
      in
        x41
  ) then
    return
      let 
          x35 : int = a
          x36 : int = b
          x37 : int = +(x35, x36)
      in
        x37
  else
    if (    let 
        x32 : int = b
        x33 : int = a
        x34 : int = >(x32, x33)
    in
      x34
    ) then
      return
        let 
            x26 : int = a
            x29 : int = b
            x30 : int = a
            x31 : int = mod(x29, x30)
            x27 : int = x31
            x28 : int = gcd(x26, x27)
        in
          x28
    else
      return
        let 
            x23 : int = a
            x24 : int = b
            x25 : int = mod(x23, x24)
            x20 : int = x25
            x21 : int = b
            x22 : int = gcd(x20, x21)
        in
          x22
}
void main()
{
  int x;
  x =   let 
      x45 : int = 14039
      x46 : int = 1529
      x47 : int = gcd(x45, x46)
  in
    x47
  ;
  print x;
}

After the copyprop phase:

int mod(int a, int b)
{
  if (  let 
      x8 : int = 0
      x9 : int = <(b, x8)
  in
    x9
  ) then
    return
      0
  else
    while (let x6 : int = >=(a, b) in x6)
      a =       let 
          x3 : int = -(a, b)
      in
        x3
      ;
  return
    a
}
int abs(int a)
{
  if (  let 
      x14 : int = 0
      x15 : int = <(a, x14)
  in
    x15
  ) then
    return
      let 
          x10 : int = 0
          x12 : int = -(x10, a)
      in
        x12
  else
    return
      a
}
int gcd(int a, int b)
{
  a =   let 
      x17 : int = abs(a)
  in
    x17
  ;
  b =   let 
      x19 : int = abs(b)
  in
    x19
  ;
  if (  let 
      x43 : int = 0
      x44 : int = ==(a, x43)
  in
    if x44 then
      x44
    else
      let 
          x40 : int = 0
          x41 : int = ==(b, x40)
      in
        x41
  ) then
    return
      let 
          x37 : int = +(a, b)
      in
        x37
  else
    if (    let 
        x34 : int = >(b, a)
    in
      x34
    ) then
      return
        let 
            x31 : int = mod(b, a)
            x28 : int = gcd(a, x31)
        in
          x28
    else
      return
        let 
            x25 : int = mod(a, b)
            x22 : int = gcd(x25, b)
        in
          x22
}
void main()
{
  int x;
  x =   let 
      x45 : int = 14039
      x46 : int = 1529
      x47 : int = gcd(x45, x46)
  in
    x47
  ;
  print x;
}

After the control phase:

mod:	(a, b)
	x8 = 0
	x9 = b < x8
	jmpzero x9, l48
	x52 = 0
	return x52
	jmp l49
l48:	nop
l50:	nop
	x6 = a >= b
	jmpzero x6, l51
	x3 = a - b
	a = x3
	jmp l50
l51:	nop
l49:	nop
	x53 = a
	return x53

abs:	(a)
	x14 = 0
	x15 = a < x14
	jmpzero x15, l54
	x10 = 0
	x12 = x10 - a
	x57 = x12
	return x57
	jmp l55
l54:	nop
	x56 = a
	return x56
l55:	nop

gcd:	(a, b)
	x17 = call abs(a)
	a = x17
	x19 = call abs(b)
	b = x19
	x43 = 0
	x44 = a == x43
	jmpzero x44, l59
	x58 = x44
	jmp l60
l59:	nop
	x40 = 0
	x41 = b == x40
	x58 = x41
l60:	nop
	jmpzero x58, l61
	x37 = a + b
	x67 = x37
	return x67
	jmp l62
l61:	nop
	x34 = b > a
	jmpzero x34, l63
	x31 = call mod(b, a)
	x28 = call gcd(a, x31)
	x66 = x28
	return x66
	jmp l64
l63:	nop
	x25 = call mod(a, b)
	x22 = call gcd(x25, b)
	x65 = x22
	return x65
l64:	nop
l62:	nop

main:	()
	x = 0
	x45 = 14039
	x46 = 1529
	x47 = call gcd(x45, x46)
	x = x47
	x68 = x
	print x68

CG environment for mod is:
a : 3
b : 2
x3 : -5
x52 : -3
x53 : -6
x6 : -4
x8 : -1
x9 : -2

CG environment for abs is:
a : 2
x10 : -3
x12 : -4
x14 : -1
x15 : -2
x56 : -6
x57 : -5

CG environment for gcd is:
a : 3
b : 2
x17 : -1
x19 : -2
x22 : -16
x25 : -15
x28 : -13
x31 : -12
x34 : -11
x37 : -9
x40 : -6
x41 : -7
x43 : -3
x44 : -4
x58 : -8
x65 : -17
x66 : -14
x67 : -10

CG environment for main is:
x : -5
x45 : -2
x46 : -3
x47 : -4
x68 : -6

Emitting MIPS assembley code to test/gcd.asm


