type token =
  | NUM of (int)
  | ID of (string)
  | TYPE of (string)
  | SEMI
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | UNIT
  | COLON
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | AND
  | OR
  | NOT
  | PRINT
  | WHILE
  | RETURN
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | MOD
  | CARET
  | LT
  | LE
  | EQ
  | NE
  | NEALT
  | GE
  | GT
  | GETS
  | QUESTION
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "bin/parser.mly"
  let mkSym(s) = Symbol.fromString s
  let mkId s = Ast.Id(mkSym s)

  let mkType string =
    match string with
    | "int"  -> Typ.Int
    | "bool" -> Typ.Bool
    | "void" -> Typ.Void
    | _ -> raise(Failure "lexer: bad type")
let mkApp(x, rands) = Ast.App {rator = mkSym x; rands = rands}
let mkInt n = Ast.Literal {typ = Typ.Int; bits = n}
let mkVoid () = Ast.Literal {typ = Typ.Void; bits = 0}
let mkBool n = Ast.Literal {typ = Typ.Bool; bits = n}
let mkBinding id typ = {Ast.id = mkSym id; typ = mkType typ}
let mkAssn lhs rhs = Ast.Assign {id = mkSym lhs; expr = rhs}
let mkProc typ id formals body =
  Ast.Procedure {id = mkSym id;
                 formals = formals;
                 typ = mkType typ;
                 body = body}
let mkCall rator rands = Ast.Call {rator = mkSym rator; rands = rands}
let mkWhile expr stmt = Ast.While {expr = expr; statement = stmt}
let mkIfS expr thn els = Ast.IfS {expr = expr; thn = thn; els = els}
let mkBlk decls stmts = Ast.Block {decls = decls; statements = stmts}
# 69 "bin/parser.ml"
let yytransl_const = [|
  260 (* SEMI *);
  261 (* COMMA *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* UNIT *);
  267 (* COLON *);
  268 (* TRUE *);
  269 (* FALSE *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELSE *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* PRINT *);
  277 (* WHILE *);
  278 (* RETURN *);
  279 (* PLUS *);
  280 (* MINUS *);
  281 (* MULTIPLY *);
  282 (* DIVIDE *);
  283 (* MOD *);
  284 (* CARET *);
  285 (* LT *);
  286 (* LE *);
  287 (* EQ *);
  288 (* NE *);
  289 (* NEALT *);
  290 (* GE *);
  291 (* GT *);
  292 (* GETS *);
  293 (* QUESTION *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* TYPE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\005\000\005\000\010\000\010\000\006\000\011\000\011\000\009\000\
\009\000\009\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\006\000\004\000\000\000\001\000\003\000\
\003\000\005\000\003\000\004\000\003\000\001\000\005\000\007\000\
\004\000\003\000\002\000\003\000\002\000\001\000\002\000\000\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\002\000\005\000\005\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\054\000\000\000\002\000\000\000\001\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\022\000\000\000\000\000\004\000\008\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\018\000\023\000\000\000\000\000\011\000\000\000\000\000\
\000\000\049\000\000\000\045\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\020\000\017\000\000\000\000\000\012\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\010\000\000\000\048\000\000\000\
\000\000\015\000\000\000\000\000\000\000\016\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\013\000\025\000\014\000\027\000\052\000\
\053\000\028\000\029\000"

let yysindex = "\004\000\
\008\255\000\000\015\255\000\000\001\000\000\000\004\255\000\000\
\000\000\024\255\020\255\030\255\027\255\034\255\016\255\000\000\
\000\000\020\255\024\255\253\254\029\255\079\002\052\255\079\002\
\000\000\036\255\000\000\016\255\085\002\000\000\000\000\079\002\
\055\255\079\002\079\002\000\000\019\255\079\002\000\000\000\000\
\000\000\079\002\079\002\239\255\079\002\015\000\000\000\058\255\
\088\002\000\000\000\000\164\001\059\255\000\000\047\000\193\001\
\079\002\000\000\222\001\000\000\099\255\000\000\079\002\079\002\
\079\002\079\002\079\002\079\002\079\002\079\002\079\002\079\002\
\079\002\079\002\079\002\079\002\079\002\079\002\079\002\251\001\
\000\000\000\000\000\000\079\002\061\255\000\000\109\002\062\255\
\000\000\042\002\142\002\129\002\099\255\099\255\040\255\040\255\
\040\255\040\255\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\020\002\109\002\000\000\000\000\063\255\000\000\079\002\
\079\002\000\000\109\002\110\002\110\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\255\000\000\000\000\000\000\070\255\000\000\000\000\
\000\000\000\000\064\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\255\
\000\000\000\000\000\000\000\000\071\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\255\000\000\000\000\000\000\000\000\
\073\255\000\000\000\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\255\000\000\000\000\000\000\000\000\
\000\000\000\000\056\255\139\001\115\000\149\000\105\255\139\255\
\173\255\207\255\183\000\217\000\251\000\029\001\063\001\097\001\
\131\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\243\255\019\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\078\000\067\000\253\255\250\255\233\255\234\255\
\203\255\000\000\079\000"

let yytablesize = 945
let yytable = "\044\000\
\008\000\046\000\032\000\088\000\001\000\051\000\033\000\016\000\
\026\000\010\000\003\000\055\000\056\000\011\000\030\000\059\000\
\007\000\020\000\012\000\060\000\061\000\048\000\080\000\015\000\
\057\000\051\000\012\000\015\000\058\000\021\000\108\000\017\000\
\034\000\018\000\035\000\022\000\023\000\024\000\019\000\047\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\045\000\054\000\052\000\052\000\082\000\052\000\110\000\
\109\000\085\000\052\000\071\000\111\000\052\000\006\000\052\000\
\052\000\052\000\027\000\027\000\007\000\027\000\115\000\024\000\
\025\000\027\000\009\000\114\000\027\000\031\000\027\000\027\000\
\027\000\116\000\117\000\118\000\052\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\049\000\027\000\034\000\034\000\000\000\034\000\
\000\000\000\000\000\000\034\000\000\000\000\000\034\000\000\000\
\034\000\034\000\034\000\068\000\069\000\070\000\071\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\035\000\035\000\
\000\000\035\000\000\000\000\000\000\000\035\000\000\000\000\000\
\035\000\000\000\035\000\035\000\035\000\000\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\037\000\037\000\000\000\037\000\000\000\000\000\000\000\037\000\
\000\000\000\000\037\000\000\000\037\000\037\000\037\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\036\000\036\000\000\000\036\000\000\000\000\000\
\000\000\036\000\000\000\000\000\036\000\000\000\036\000\036\000\
\036\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\062\000\036\000\000\000\000\000\051\000\051\000\
\000\000\051\000\000\000\000\000\063\000\051\000\000\000\064\000\
\065\000\000\000\051\000\003\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\081\000\079\000\000\000\000\000\050\000\050\000\
\000\000\050\000\000\000\000\000\063\000\050\000\000\000\064\000\
\065\000\000\000\050\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\086\000\079\000\066\000\067\000\068\000\069\000\
\070\000\071\000\000\000\000\000\063\000\000\000\000\000\064\000\
\065\000\000\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\079\000\046\000\046\000\000\000\046\000\
\000\000\000\000\000\000\046\000\000\000\000\000\046\000\000\000\
\046\000\046\000\046\000\000\000\000\000\000\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\046\000\032\000\032\000\
\000\000\032\000\000\000\000\000\000\000\032\000\000\000\000\000\
\032\000\000\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\032\000\
\033\000\033\000\000\000\033\000\000\000\000\000\000\000\033\000\
\000\000\000\000\033\000\000\000\033\000\033\000\033\000\000\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\038\000\038\000\000\000\038\000\000\000\000\000\
\000\000\038\000\000\000\000\000\038\000\000\000\038\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\039\000\039\000\000\000\039\000\
\000\000\000\000\000\000\039\000\000\000\000\000\039\000\000\000\
\039\000\039\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\039\000\040\000\040\000\
\000\000\040\000\000\000\000\000\000\000\040\000\000\000\000\000\
\040\000\000\000\040\000\040\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\
\041\000\041\000\000\000\041\000\000\000\000\000\000\000\041\000\
\000\000\000\000\041\000\000\000\041\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\042\000\042\000\000\000\042\000\000\000\000\000\
\000\000\042\000\000\000\000\000\042\000\000\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\044\000\044\000\000\000\044\000\
\000\000\000\000\000\000\044\000\000\000\000\000\044\000\000\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\043\000\043\000\
\000\000\043\000\000\000\000\000\000\000\043\000\053\000\053\000\
\043\000\053\000\043\000\043\000\043\000\053\000\000\000\000\000\
\053\000\000\000\053\000\000\000\053\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\063\000\000\000\000\000\064\000\065\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\087\000\
\079\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\000\000\064\000\065\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\089\000\079\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\064\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\107\000\079\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\064\000\065\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\113\000\079\000\
\000\000\063\000\000\000\000\000\064\000\065\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\063\000\
\079\000\112\000\064\000\065\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\079\000\036\000\
\037\000\000\000\000\000\000\000\038\000\000\000\020\000\000\000\
\039\000\020\000\040\000\041\000\015\000\050\000\000\000\015\000\
\083\000\042\000\021\000\000\000\000\000\021\000\043\000\000\000\
\022\000\023\000\024\000\022\000\023\000\024\000\020\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\064\000\065\000\
\022\000\023\000\024\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\064\000\000\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000"

let yycheck = "\022\000\
\000\000\024\000\006\001\057\000\001\000\029\000\010\001\011\000\
\015\000\006\001\003\001\034\000\035\000\010\001\018\000\038\000\
\002\001\002\001\003\001\042\000\043\000\028\000\045\000\008\001\
\006\001\049\000\003\001\008\001\010\001\014\001\084\000\002\001\
\036\001\007\001\006\001\020\001\021\001\022\001\005\001\004\001\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\006\001\004\001\004\001\005\001\004\001\007\001\087\000\
\004\001\007\001\011\001\028\001\007\001\014\001\007\001\016\001\
\017\001\018\001\004\001\005\001\007\001\007\001\016\001\007\001\
\007\001\011\001\005\000\107\000\014\001\019\000\016\001\017\001\
\018\001\112\000\113\000\115\000\037\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\028\000\037\001\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\025\001\026\001\027\001\028\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\011\001\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\011\001\
\255\255\255\255\014\001\255\255\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\037\001\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\255\255\014\001\255\255\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\004\001\037\001\255\255\255\255\004\001\005\001\
\255\255\007\001\255\255\255\255\014\001\011\001\255\255\017\001\
\018\001\255\255\016\001\003\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\004\001\037\001\255\255\255\255\004\001\005\001\
\255\255\007\001\255\255\255\255\014\001\011\001\255\255\017\001\
\018\001\255\255\016\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\004\001\037\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\014\001\255\255\255\255\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\037\001\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\011\001\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\011\001\
\255\255\255\255\014\001\255\255\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\037\001\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\255\255\014\001\255\255\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\037\001\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\011\001\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\011\001\
\255\255\255\255\014\001\255\255\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\037\001\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\255\255\014\001\255\255\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\037\001\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\011\001\004\001\005\001\
\014\001\007\001\016\001\017\001\018\001\011\001\255\255\255\255\
\014\001\255\255\016\001\255\255\018\001\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\255\255\014\001\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\007\001\
\037\001\255\255\255\255\255\255\255\255\255\255\014\001\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\007\001\037\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\017\001\018\001\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\007\001\037\001\255\255\255\255\255\255\255\255\255\255\
\014\001\255\255\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\011\001\037\001\
\255\255\014\001\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\014\001\
\037\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\037\001\001\001\
\002\001\255\255\255\255\255\255\006\001\255\255\002\001\255\255\
\010\001\002\001\012\001\013\001\008\001\009\001\255\255\008\001\
\009\001\019\001\014\001\255\255\255\255\014\001\024\001\255\255\
\020\001\021\001\022\001\020\001\021\001\022\001\002\001\255\255\
\255\255\255\255\255\255\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\255\255\255\255\255\255\017\001\018\001\
\020\001\021\001\022\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\017\001\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001"

let yynames_const = "\
  SEMI\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  UNIT\000\
  COLON\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  WHILE\000\
  RETURN\000\
  PLUS\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  MOD\000\
  CARET\000\
  LT\000\
  LE\000\
  EQ\000\
  NE\000\
  NEALT\000\
  GE\000\
  GT\000\
  GETS\000\
  QUESTION\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  TYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procedures) in
    Obj.repr(
# 52 "bin/parser.mly"
                                                   ( Ast.Program(_1) )
# 485 "bin/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 54 "bin/parser.mly"
                                                   ( [_1] )
# 492 "bin/parser.ml"
               : 'procedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procedures) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 55 "bin/parser.mly"
                                                   ( _1 @ [_2] )
# 500 "bin/parser.ml"
               : 'procedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 58 "bin/parser.mly"
                                                   ( mkProc _1 _2 _4 _6 )
# 510 "bin/parser.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 59 "bin/parser.mly"
                                               ( mkProc _1 _2 [] _4 )
# 519 "bin/parser.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "bin/parser.mly"
                                                    ( [] )
# 525 "bin/parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 63 "bin/parser.mly"
                                                     ( [_1] )
# 532 "bin/parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 64 "bin/parser.mly"
                                                     ( _1::_3 )
# 540 "bin/parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 68 "bin/parser.mly"
                                                   ( Ast.Return(_2) )
# 547 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expressions) in
    Obj.repr(
# 69 "bin/parser.mly"
                                                   ( mkCall _1 _3 )
# 555 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 70 "bin/parser.mly"
                                              ( mkCall _1 [] )
# 562 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 71 "bin/parser.mly"
                                                   ( mkAssn _1 _3 )
# 570 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 72 "bin/parser.mly"
                                                   ( Ast.Print(_2) )
# 577 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 73 "bin/parser.mly"
                                                   ( _1 )
# 584 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 74 "bin/parser.mly"
                                                   ( mkWhile _3 _5 )
# 592 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 75 "bin/parser.mly"
                                                   ( mkIfS _3 _5 _7)
# 601 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 78 "bin/parser.mly"
                                                   ( mkBlk _2 _3 )
# 609 "bin/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 79 "bin/parser.mly"
                                                   ( mkBlk [] _2 )
# 616 "bin/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 82 "bin/parser.mly"
                                                   ( [_1] )
# 623 "bin/parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 83 "bin/parser.mly"
                                                   ( _1 @ [_2] )
# 631 "bin/parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "bin/parser.mly"
                                                   ( mkBinding _2 _1 )
# 639 "bin/parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 89 "bin/parser.mly"
                                                   ( [_1] )
# 646 "bin/parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "bin/parser.mly"
                                                   ( _1 @ [_2] )
# 654 "bin/parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "bin/parser.mly"
                                                   ( [] )
# 660 "bin/parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 94 "bin/parser.mly"
                                                   ( [_1] )
# 667 "bin/parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressions) in
    Obj.repr(
# 95 "bin/parser.mly"
                                                   ( _1::_3 )
# 675 "bin/parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "bin/parser.mly"
                                                   ( mkId(_1) )
# 682 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 98 "bin/parser.mly"
                                                   ( mkInt _1 )
# 689 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "bin/parser.mly"
                                                    ( mkVoid () )
# 695 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "bin/parser.mly"
                                                   ( mkBool 1 )
# 701 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "bin/parser.mly"
                                                   ( mkBool 0 )
# 707 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 102 "bin/parser.mly"
                                                   ( mkApp("+", [_1; _3]) )
# 715 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 103 "bin/parser.mly"
                                                   ( mkApp("-", [_1; _3]) )
# 723 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 104 "bin/parser.mly"
                                                   ( mkApp("*", [_1; _3]) )
# 731 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "bin/parser.mly"
                                                   ( mkApp("/", [_1; _3]) )
# 739 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 106 "bin/parser.mly"
                                                   ( mkApp("**", [_1; _3]) )
# 747 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 107 "bin/parser.mly"
                                                   ( mkApp("%", [_1; _3]) )
# 755 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 108 "bin/parser.mly"
                                                   ( mkApp("<", [_1; _3]) )
# 763 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 109 "bin/parser.mly"
                                                   ( mkApp("<=", [_1; _3]) )
# 771 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 110 "bin/parser.mly"
                                                   ( mkApp("==", [_1; _3]) )
# 779 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 111 "bin/parser.mly"
                                                   ( mkApp("<>", [_1; _3]) )
# 787 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 112 "bin/parser.mly"
                                                   ( mkApp("<>", [_1; _3]) )
# 795 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 113 "bin/parser.mly"
                                                   ( mkApp(">", [_1; _3])  )
# 803 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 114 "bin/parser.mly"
                                                   ( mkApp(">=", [_1; _3]) )
# 811 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 115 "bin/parser.mly"
                                                   ( mkApp("not", [_2]) )
# 818 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 116 "bin/parser.mly"
                                                   ( mkApp("-",[mkInt 0;_2]) )
# 825 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 117 "bin/parser.mly"
                                                   ( _2 )
# 832 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 118 "bin/parser.mly"
                                                   ( mkApp(_1, _3) )
# 840 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 119 "bin/parser.mly"
                                          ( mkApp(_1, []) )
# 847 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "bin/parser.mly"
                                                   ( Ast.If {expr=_1; thn=_3; els=_5} )
# 856 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "bin/parser.mly"
                                                   ( Ast.If {expr=_3; thn=_1; els=_5} )
# 865 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 122 "bin/parser.mly"
                                                   ( Ast.And {left=_1; right=_3} )
# 873 "bin/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 123 "bin/parser.mly"
                                                   ( Ast.Or  {left=_1; right=_3} )
# 881 "bin/parser.ml"
               : 'exp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
